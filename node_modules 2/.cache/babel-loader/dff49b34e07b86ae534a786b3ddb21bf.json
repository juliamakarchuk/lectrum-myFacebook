{"ast":null,"code":"import _objectSpread from \"/Users/admin/Documents/GitHub/lectrum-myFacebook/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/Users/admin/Documents/GitHub/lectrum-myFacebook/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/admin/Documents/GitHub/lectrum-myFacebook/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/Users/admin/Documents/GitHub/lectrum-myFacebook/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/admin/Documents/GitHub/lectrum-myFacebook/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/admin/Documents/GitHub/lectrum-myFacebook/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/admin/Documents/GitHub/lectrum-myFacebook/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/admin/Documents/GitHub/lectrum-myFacebook/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/admin/Documents/GitHub/lectrum-myFacebook/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/admin/Documents/GitHub/lectrum-myFacebook/src/components/Feed/index.jsx\";\nimport React, { Component } from 'react';\nimport moment from 'moment';\nimport { withProfile } from '../HOC/withProfile';\nimport StatusBar from '../StatusBar';\nimport Composer from '../Composer';\nimport Post from '../Post';\nimport Spinner from '../Spinner';\nimport Styles from './styles.module.css';\nimport { getUniqueID, delay } from '../../instruments/index';\n\nvar Feed =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Feed, _Component);\n\n  function Feed() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Feed);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Feed)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      posts: [{\n        id: '123',\n        comment: 'Hi there',\n        created: '1526825076849',\n        likes: []\n      }, {\n        id: '344',\n        comment: 'Hello',\n        created: '1526825076867',\n        likes: []\n      }],\n      isSpinning: false\n    };\n\n    _this._setPostsFetchingState = function (state) {\n      _this.setState({\n        isSpinning: state\n      });\n    };\n\n    _this._createPost =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(comment) {\n        var post;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this._setPostsFetchingState(true);\n\n                post = {\n                  id: getUniqueID(),\n                  created: moment().utc(),\n                  comment: comment,\n                  likes: []\n                };\n                _context.next = 4;\n                return delay(1600);\n\n              case 4:\n                _this.setState(function (_ref2) {\n                  var posts = _ref2.posts;\n                  return {\n                    posts: [post].concat(_toConsumableArray(posts)),\n                    isSpinning: false\n                  };\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this._likePost =\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(id) {\n        var _this$props, currentUserFirstName, currentUserLastName, newPosts;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this$props = _this.props, currentUserFirstName = _this$props.currentUserFirstName, currentUserLastName = _this$props.currentUserLastName;\n\n                _this._setPostsFetchingState(true);\n\n                _context2.next = 4;\n                return delay(1600);\n\n              case 4:\n                newPosts = _this.state.posts.map(function (post) {\n                  if (post.id === id) {\n                    return _objectSpread({}, post, {\n                      likes: [{\n                        id: getUniqueID(),\n                        firstName: currentUserFirstName,\n                        lastName: currentUserLastName\n                      }]\n                    });\n                  }\n\n                  return post;\n                });\n\n                _this.setState({\n                  posts: newPosts,\n                  isSpinning: false\n                });\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    _this._removePost = function (id) {\n      var posts = _this.state.posts;\n\n      _this.setState({\n        posts: posts.filter(function (post) {\n          return post.id !== id;\n        })\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Feed, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          posts = _this$state.posts,\n          isSpinning = _this$state.isSpinning;\n      var postsJSX = posts.map(function (post) {\n        return React.createElement(Post, Object.assign({\n          key: post.id\n        }, post, {\n          _likePost: _this2._likePost,\n          _removePost: _this2._removePost,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        }));\n      });\n      return React.createElement(\"section\", {\n        className: Styles.feed,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(Spinner, {\n        isSpinning: isSpinning,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }), React.createElement(StatusBar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }), React.createElement(Composer, {\n        _createPost: this._createPost,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }), postsJSX);\n    }\n  }]);\n\n  return Feed;\n}(Component);\n\nexport { Feed as default };","map":{"version":3,"sources":["/Users/admin/Documents/GitHub/lectrum-myFacebook/src/components/Feed/index.jsx"],"names":["React","Component","moment","withProfile","StatusBar","Composer","Post","Spinner","Styles","getUniqueID","delay","Feed","state","posts","id","comment","created","likes","isSpinning","_setPostsFetchingState","setState","_createPost","post","utc","_likePost","props","currentUserFirstName","currentUserLastName","newPosts","map","firstName","lastName","_removePost","filter","postsJSX","feed"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport moment from 'moment';\n\nimport { withProfile } from '../HOC/withProfile';\nimport StatusBar from '../StatusBar'\nimport Composer from '../Composer';\nimport Post from '../Post';\nimport Spinner from '../Spinner';\n\nimport Styles from './styles.module.css';\nimport { getUniqueID, delay } from '../../instruments/index';\n\nexport default class Feed extends Component{\n    // constructor () {\n    //     super();\n\n    //     this._createPost = this._createPost.bind(this);\n    //     this._setPostsFetchingState = this._setPostsFetchingState.bind(this);\n    //     this._likePost = this._likePost.bind(this);\n    //     this._removePost = this._removePost.bind(this)\n    // }\n    state = {\n        posts: [\n            {id: '123', comment: 'Hi there', created: '1526825076849', likes:[]},\n            {id: '344', comment: 'Hello', created: '1526825076867', likes:[]}\n        ],\n        isSpinning: false\n    }\n\n    _setPostsFetchingState = ( state ) =>{\n        this.setState({\n            isSpinning : state\n        })\n    }\n\n    _createPost = async (comment) =>{\n        this._setPostsFetchingState(true);\n        const post = {\n            id: getUniqueID(),\n            created: moment().utc(),\n            comment,\n            likes: []\n        };\n\n        await delay (1600);\n\n        this.setState(({ posts })=>({\n            posts: [post, ...posts],\n            isSpinning: false\n        }))\n    }\n    \n    _likePost = async (id) =>{\n       const { currentUserFirstName, currentUserLastName} = this.props;\n       this._setPostsFetchingState(true);\n\n       await delay(1600);\n       \n       const newPosts = this.state.posts.map(post=> {\n           if(post.id === id) {\n               return {\n                   ...post,\n                   likes:[\n                       {\n                           id: getUniqueID(),\n                           firstName: currentUserFirstName,\n                           lastName: currentUserLastName\n                       }\n                   ]\n               }\n           }\n           return post;\n       })\n       this.setState({\n           posts: newPosts,\n           isSpinning: false\n       })\n    }\n\n    _removePost = (id) =>{\n      let { posts } = this.state;\n      this.setState({\n          posts: posts.filter(post => post.id !== id)\n      })\n    }\n\n    render () {\n        const { posts , isSpinning } = this.state;\n\n        const postsJSX = posts.map((post)=>{\n            return <Post key = { post.id } {...post} _likePost = { this._likePost } _removePost = { this._removePost }/>\n        });\n\n        return(\n            <section className = { Styles.feed }>\n                <Spinner isSpinning = { isSpinning }/>\n                <StatusBar />\n                <Composer _createPost = { this._createPost }/>\n                {postsJSX}\n            </section>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}