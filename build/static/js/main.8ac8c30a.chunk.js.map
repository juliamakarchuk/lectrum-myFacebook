{"version":3,"sources":["theme/assets/lisa.png","components/StatusBar/styles.module.css","components/Composer/styles.module.css","components/Post/styles.module.css","components/Feed/styles.module.css","components/StatusBar/index.jsx","components/Composer/index.jsx","components/Post/index.jsx","components/Feed/index.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","statusBar","composer","post","feed","StatusBar","_this$props","this","props","avatar","currentUserFirstName","currentUserLastName","react_default","a","createElement","className","Styles","src","Component","Composer","placeholder","concat","type","value","Post","moment","format","Feed","StatusBar_StatusBar","Composer_Composer","Post_Post","options","App","Feed_Feed","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oDCCxCH,EAAAC,QAAA,CAAkBG,UAAA,4CCAlBJ,EAAAC,QAAA,CAAkBI,SAAA,4CCAlBL,EAAAC,QAAA,CAAkBK,KAAA,uCCAlBN,EAAAC,QAAA,CAAkBM,KAAA,6PCIGC,mLACP,IAAAC,EAKFC,KAAKC,MAHLC,EAFEH,EAEFG,OACAC,EAHEJ,EAGFI,qBACAC,EAJEL,EAIFK,oBAEL,OACIC,EAAAC,EAAAC,cAAA,WAASC,UAAaC,IAAOf,WAC5BW,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,OAAKG,IAAQR,IACbG,EAAAC,EAAAC,cAAA,gBAASJ,EAAT,KAFJ,OAIIE,EAAAC,EAAAC,cAAA,gBAASH,EAAT,cAbuBO,8BCClBC,mLACR,IAAAb,EACoCC,KAAKC,MAAtCC,EADHH,EACGG,OAAQC,EADXJ,EACWI,qBAChB,OACIE,EAAAC,EAAAC,cAAA,WAASC,UAAcC,IAAOd,UAC1BU,EAAAC,EAAAC,cAAA,eACIF,EAAAC,EAAAC,cAAA,OAAKG,IAAQR,IACbG,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,YAAUM,YAAW,gCAAAC,OAAqCX,KAC1DE,EAAAC,EAAAC,cAAA,SAAOQ,KAAO,SAASC,MAAQ,mBATjBL,+CCDjBM,mLACR,IAAAlB,EAKDC,KAAKC,MAHLE,EAFCJ,EAEDI,qBACAC,EAHCL,EAGDK,oBACAF,EAJCH,EAIDG,OAGJ,OACIG,EAAAC,EAAAC,cAAA,WAASC,UAAcC,IAAOb,MACtBS,EAAAC,EAAAC,cAAA,OAAKG,IAAQR,IACbG,EAAAC,EAAAC,cAAA,gBAAAO,OAASX,EAAT,KAAAW,OAAmCV,GAAnC,KACAC,EAAAC,EAAAC,cAAA,YAAOW,MAASC,OAAO,qBACvBd,EAAAC,EAAAC,cAAA,0BAbcI,8BCGbS,mLAEP,IAAArB,EACmCC,KAAKC,MAAtCC,EADFH,EACEG,OAAQC,EADVJ,EACUI,qBAChB,OACIE,EAAAC,EAAAC,cAAA,WAASC,UAAcC,IAAOZ,MAC1BQ,EAAAC,EAAAC,cAACc,EAAerB,KAAKC,OACrBI,EAAAC,EAAAC,cAACe,EAAD,CACEpB,OAAWA,EACXC,qBAAyBA,IAC3BE,EAAAC,EAAAC,cAACgB,EAAUvB,KAAKC,eAVEU,aCF5Ba,SAAU,CACZtB,WACAC,qBAAsB,OACtBC,oBAAqB,YAGJqB,mLAGb,OAAOpB,EAAAC,EAAAC,cAACmB,EAAUF,UAHOb,aCAbgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8ac8c30a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/lisa.c0366208.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statusBar\":\"styles_statusBar__zLt2W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"composer\":\"styles_composer__1L4YR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"styles_post__SLlb5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"feed\":\"styles_feed__2eRp9\"};","import React, { Component } from 'react';\n\nimport Styles from './styles.module.css';\nimport avatar from '../../theme/assets/lisa.png';\n\nexport default class StatusBar extends Component {\n    render () {\n        const {\n            avatar,\n            currentUserFirstName,\n            currentUserLastName\n        } = this.props;\n       return(\n           <section className = {Styles.statusBar}>\n            <button>\n                <img src = { avatar }/>\n                <span> { currentUserFirstName } </span>\n                &nbsp;\n                <span> { currentUserLastName } </span>\n            </button>\n           </section>\n       )\n    }\n}","import React, {Component} from 'react';\n\n\nimport Styles from './styles.module.css';\n\n\nexport default class Composer extends Component{\n    render() {\n        const { avatar, currentUserFirstName } = this.props;\n        return (\n            <section className = { Styles.composer }>\n                <section>\n                    <img src = { avatar }/>\n                    <form>\n                        <textarea placeholder = {`What are you thinking about, ${ currentUserFirstName }`}/>\n                        <input type = \"submit\" value = 'Post'/>\n                    </form>\n                </section>\n            </section>\n        )\n    }\n}","import React, {Component} from 'react';\nimport moment from 'moment';\n\nimport Styles from './styles.module.css';\n\nexport default class Post extends Component{\n    render() {\n        const {\n            currentUserFirstName,\n            currentUserLastName,\n            avatar\n        } = this.props;\n\n        return (\n            <section className = { Styles.post } >\n                    <img src = { avatar } />\n                    <a> {`${ currentUserFirstName } ${ currentUserLastName }`} </a>\n                    <time>{moment().format('MMMM D h:mm:ss a')}</time>\n                    <p>Howdy</p>\n            </section>\n        )\n    }\n}","import React, {Component} from 'react';\n\nimport StatusBar from '../StatusBar'\nimport Composer from '../Composer';\nimport Post from '../Post';\n\nimport Styles from './styles.module.css';\n\nexport default class Feed extends Component{\n\n    render () {\n        const { avatar, currentUserFirstName } = this.props;\n        return(\n            <section className = { Styles.feed }>\n                <StatusBar { ...this.props }/>\n                <Composer \n                  avatar = { avatar }\n                  currentUserFirstName = { currentUserFirstName }/>\n                <Post { ...this.props } />\n            </section>\n        )\n    }\n}","import React, {Component} from 'react';\n\nimport Feed from './components/Feed';\nimport './theme/init.css'\nimport avatar from './theme/assets/lisa.png';\n\nconst options = {\n    avatar,\n    currentUserFirstName: 'Lisa',\n    currentUserLastName: 'Simpson'\n}\n\nexport default class App extends Component {\n\n    render () {\n        return <Feed { ...options } />\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}